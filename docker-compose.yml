version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: chat_postgres
    environment:
      POSTGRES_DB: chat_db
      POSTGRES_USER: chat_user
      POSTGRES_PASSWORD: chat_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chat_user -d chat_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chat_network

  postgres_test:
    image: postgres:15-alpine
    container_name: chat_postgres_test
    environment:
      POSTGRES_DB: chat_test_db
      POSTGRES_USER: chat_user
      POSTGRES_PASSWORD: chat_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"
    profiles: ["test"]
    networks:
      - chat_network

  redis:
    image: redis:7-alpine
    container_name: chat_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chat_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: chat_backend
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://chat_user:chat_password@postgres:5432/chat_db
      TEST_DATABASE_URL: postgresql+asyncpg://chat_user:chat_password@postgres_test:5432/chat_test_db
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      
      # JWT Configuration
      SECRET_KEY: dev-secret-key-change-in-production-123456789
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 1440
      REFRESH_TOKEN_EXPIRE_DAYS: 30
      
      # CORS Configuration
      CORS_ORIGINS: '["http://localhost:3000", "http://frontend:3000"]'
      
      # Application Settings
      DEBUG: "true"
      APP_NAME: "Chat Service"
      APP_VERSION: "1.0.0"
      API_V1_PREFIX: "/v1"
      
      # File Upload Settings
      MAX_FILE_SIZE: 104857600
      ALLOWED_FILE_TYPES: '["image/jpeg", "image/png", "image/gif", "application/pdf", "text/plain"]'
      
      # Logging Configuration
      LOG_LEVEL: INFO
      LOG_FORMAT: json
      
      # Rate Limiting
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS_PER_MINUTE: 100
      
      # WebSocket Configuration
      WS_HEARTBEAT_INTERVAL: 30
      WS_MAX_CONNECTIONS_PER_USER: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chat_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: chat_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      # API Configuration
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_WS_URL: ws://localhost:8000/v1/ws
      
      # Authentication Configuration
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: dev-nextauth-secret-123456789
      
      # Application Settings
      NEXT_PUBLIC_APP_ENV: development
      NEXT_PUBLIC_APP_NAME: "Chat Service"
      NEXT_PUBLIC_API_TIMEOUT: 10000
      
      # Feature Flags
      NEXT_PUBLIC_ENABLE_FILE_UPLOAD: "true"
      NEXT_PUBLIC_ENABLE_VOICE_MESSAGES: "false"
      NEXT_PUBLIC_ENABLE_VIDEO_CALLS: "false"
    depends_on:
      - backend
    networks:
      - chat_network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: chat_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@chat.com
      PGADMIN_DEFAULT_PASSWORD: admin123456
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - chat_network
    profiles: ["tools"]

volumes:
  postgres_data:
  redis_data:

networks:
  chat_network:
    driver: bridge