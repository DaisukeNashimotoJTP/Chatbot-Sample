version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: chat_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-chat_db}
      POSTGRES_USER: ${POSTGRES_USER:-chat_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-chat_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-chat_user} -d ${POSTGRES_DB:-chat_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chat_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: chat_redis_prod
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - chat_network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: chat_backend_prod
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-chat_user}:${POSTGRES_PASSWORD:-chat_password}@postgres:5432/${POSTGRES_DB:-chat_db}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      
      # JWT Configuration
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 1440
      REFRESH_TOKEN_EXPIRE_DAYS: 30
      
      # CORS Configuration
      CORS_ORIGINS: ${CORS_ORIGINS:-'["https://yourdomain.com"]'}
      
      # Application Settings
      DEBUG: "false"
      APP_NAME: "Chat Service"
      APP_VERSION: "1.0.0"
      API_V1_PREFIX: "/v1"
      
      # File Upload Settings
      MAX_FILE_SIZE: 104857600
      ALLOWED_FILE_TYPES: '["image/jpeg", "image/png", "image/gif", "application/pdf", "text/plain"]'
      
      # Email Configuration
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}
      
      # AWS Configuration
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-ap-northeast-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      CLOUDFRONT_DOMAIN: ${CLOUDFRONT_DOMAIN}
      
      # Logging Configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: json
      
      # Rate Limiting
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_REQUESTS_PER_MINUTE: 100
      
      # WebSocket Configuration
      WS_HEARTBEAT_INTERVAL: 30
      WS_MAX_CONNECTIONS_PER_USER: 5
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chat_network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: chat_frontend_prod
    ports:
      - "3000:3000"
    environment:
      # API Configuration
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8000/v1/ws}
      
      # Authentication Configuration
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      
      # Application Settings
      NEXT_PUBLIC_APP_ENV: production
      NEXT_PUBLIC_APP_NAME: "Chat Service"
      NEXT_PUBLIC_API_TIMEOUT: 10000
      
      # Feature Flags
      NEXT_PUBLIC_ENABLE_FILE_UPLOAD: ${NEXT_PUBLIC_ENABLE_FILE_UPLOAD:-"true"}
      NEXT_PUBLIC_ENABLE_VOICE_MESSAGES: ${NEXT_PUBLIC_ENABLE_VOICE_MESSAGES:-"false"}
      NEXT_PUBLIC_ENABLE_VIDEO_CALLS: ${NEXT_PUBLIC_ENABLE_VIDEO_CALLS:-"false"}
      
      # Analytics
      NEXT_PUBLIC_GA_TRACKING_ID: ${NEXT_PUBLIC_GA_TRACKING_ID}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
    depends_on:
      - backend
    networks:
      - chat_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  chat_network:
    driver: bridge
